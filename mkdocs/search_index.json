{
    "docs": [
        {
            "location": "/", 
            "text": "Jquery AJAX How-To\n\n\nBackground\n\n\nJquery\n is a third party JavaScript framework that is used for Browser-based scripting. Jquery became popular because it allowed developers to write their JavaScript code once and it would work roughly the same in the majority of browsers. Given our course's focus on AJAX I thought it would be good to document and showcase how the Jquery AJAX API works.\n\n\nSimple Example\n\n\n  $.ajax({\n    method: \nPOST\n,\n    url: \nsome.php\n,\n    data: { name: \nJohn\n, location: \nBoston\n }\n  }).done(function(msg) {\n    alert(\nData Saved: \n + msg);\n  });\n\n\n\n\nJquery is scoped to the '$' when used in the browser so we are using the ajax method defined on the jquery object. As can be seen in the code above a post is being made to a php url with the data being sent as JSON. The resolution of the request is handled using promises notably the .done method. Jquery ajax supports promises as well as the more traditional callback pattern. Let's go over some of the configuration options when composing an AJAX request using Jquery.\n\n\nComparing Jquery AJAX to native AJAX API\n\n\nTypical Native AJAX call:\n\n\nvar req = new XMLHttpRequest();\nvar url = \nhttp://httpbin.org/post\n;\nvar payload = {\n  'name': \nAlex\n,\n  'age': 29,\n  'weight': 155\n};\nreq.open(\nPOST\n, url, true);\nreq.setRequestHeader('Content-Type', 'application/json');\nreq.addEventListener('load', function() {\n  if (req.status \n= 200 \n req.status \n 400) {\n    var res = JSON.parse(JSON.parse(req.responseText).data);\n    postResponse(res);\n  } else {\n    var str = \nError in network request: \n + res.statusText;\n    console.log(str);\n    alert(str);\n  }\n});\nreq.send(JSON.stringify(payload));\n\n\n\n\nEquivalent Jquery AJAX call:\n\n\n$.ajax({\n  url: 'http://httpbin.org/post',\n  dataType: 'json',\n  data: {\n    'name': \nAlex\n,\n    'age': 29,\n    'weight': 155\n  },\n  type: 'POST'\n  success: postResponse,\n  error: function(jqXHR, textStatus, errThrown) {\n    console.log(errThrown);\n  }\n});\n\n\n\n\nAs can be seen by the comparison above jquery lives up to its slogan of \"Write less, do more\". The main benefit is the jquery API allows for all the request's pieces to be contained within the $.ajax call keeping the request itself modular.\n\n\nSample Settings\n\n\nThe ajax method in Jquery accepts two main arguments. The first argument is the url for where the request is being made/sent to and the second is a JavaScript object that contains settings options used for the call. I will now go over some of the more popular settings:\n\n\n  $.ajax('http://api.github.com/users', {\n    method: 'GET'\n  });\n\n\n\n\nThe method option specifies which HTTP method you will use in your AJAX request. The available options include 'POST', 'GET' and 'PUT'.\n\n\n  $.ajax('http://api.github.com/users', {\n    method: 'GET',\n    dataType: 'json'\n  });\n\n\n\n\nThe dataType option specifies the format the data requested should be in when the request completes.\n\n\n  $.ajax('http://api.github.com/users', {\n    method: 'GET',\n    dataType: 'json',\n    error: function(jqXHR, textStatus, errorThrown) {\n      console.log(errorThrown);\n    }\n  }); \n\n\n\n\nThe error option allows the developer to specifiy a callback that will fire if the given request fails.\n\n\n  $.ajax('http://api.github.com/users', {\n    method: 'GET',\n    dataType: 'json',\n    error: function(jqXHR, textStatus, errorThrown) {\n      console.log(errorThrown);\n    },\n    success: function(data, textStatus, jqXHR) {\n      processData(data);\n    }\n  });\n\n\n\n\nThe success option allows the developer to specifiy a callback that will fire if the request is successful and will be passed the requested data as the first argument.\n\n\nOther Jquery AJAX Methods\n\n\nBesides the ajax method scoped off the '$' jquery object there are a few other methods that can be reviewed on the Jquery documentation pages.\n\n\n  $.get(url, [settings]);\n\n\n\n\nThe \njquery.get\n method is just like the ajax method but it is only for get requests.\n\n\n  $.post(url, [settings]);\n\n\n\n\nThe \njquery.post\n method is just like the ajax method but it is only for post requests.\n\n\nPromises\n\n\nPrior to Jquery 1.5 a jquery ajax request needed success and/or error callbacks passed as options into the call so that the request could be properly handled, like so:\n\n\n  $.ajax({\n    url: \n/serverresource.txt\n,\n    success: successCallback,\n    error: errorCallback\n  });\n\n\n\n\nHowever now jquery ajax calls return objects that implement the \nCommonJS\n promises interface which allows for this functionality:\n\n\n  var promise = $.ajax({\n    url: \n/serverresource.txt\n\n  });\n\n  promise.done(successCallback);\n  promise.fail(errorCallback);\n  promise.always(alwaysCallback);", 
            "title": "Home"
        }, 
        {
            "location": "/#jquery-ajax-how-to", 
            "text": "", 
            "title": "Jquery AJAX How-To"
        }, 
        {
            "location": "/#background", 
            "text": "Jquery  is a third party JavaScript framework that is used for Browser-based scripting. Jquery became popular because it allowed developers to write their JavaScript code once and it would work roughly the same in the majority of browsers. Given our course's focus on AJAX I thought it would be good to document and showcase how the Jquery AJAX API works.", 
            "title": "Background"
        }, 
        {
            "location": "/#simple-example", 
            "text": "$.ajax({\n    method:  POST ,\n    url:  some.php ,\n    data: { name:  John , location:  Boston  }\n  }).done(function(msg) {\n    alert( Data Saved:   + msg);\n  });  Jquery is scoped to the '$' when used in the browser so we are using the ajax method defined on the jquery object. As can be seen in the code above a post is being made to a php url with the data being sent as JSON. The resolution of the request is handled using promises notably the .done method. Jquery ajax supports promises as well as the more traditional callback pattern. Let's go over some of the configuration options when composing an AJAX request using Jquery.", 
            "title": "Simple Example"
        }, 
        {
            "location": "/#comparing-jquery-ajax-to-native-ajax-api", 
            "text": "Typical Native AJAX call:  var req = new XMLHttpRequest();\nvar url =  http://httpbin.org/post ;\nvar payload = {\n  'name':  Alex ,\n  'age': 29,\n  'weight': 155\n};\nreq.open( POST , url, true);\nreq.setRequestHeader('Content-Type', 'application/json');\nreq.addEventListener('load', function() {\n  if (req.status  = 200   req.status   400) {\n    var res = JSON.parse(JSON.parse(req.responseText).data);\n    postResponse(res);\n  } else {\n    var str =  Error in network request:   + res.statusText;\n    console.log(str);\n    alert(str);\n  }\n});\nreq.send(JSON.stringify(payload));  Equivalent Jquery AJAX call:  $.ajax({\n  url: 'http://httpbin.org/post',\n  dataType: 'json',\n  data: {\n    'name':  Alex ,\n    'age': 29,\n    'weight': 155\n  },\n  type: 'POST'\n  success: postResponse,\n  error: function(jqXHR, textStatus, errThrown) {\n    console.log(errThrown);\n  }\n});  As can be seen by the comparison above jquery lives up to its slogan of \"Write less, do more\". The main benefit is the jquery API allows for all the request's pieces to be contained within the $.ajax call keeping the request itself modular.", 
            "title": "Comparing Jquery AJAX to native AJAX API"
        }, 
        {
            "location": "/#sample-settings", 
            "text": "The ajax method in Jquery accepts two main arguments. The first argument is the url for where the request is being made/sent to and the second is a JavaScript object that contains settings options used for the call. I will now go over some of the more popular settings:    $.ajax('http://api.github.com/users', {\n    method: 'GET'\n  });  The method option specifies which HTTP method you will use in your AJAX request. The available options include 'POST', 'GET' and 'PUT'.    $.ajax('http://api.github.com/users', {\n    method: 'GET',\n    dataType: 'json'\n  });  The dataType option specifies the format the data requested should be in when the request completes.    $.ajax('http://api.github.com/users', {\n    method: 'GET',\n    dataType: 'json',\n    error: function(jqXHR, textStatus, errorThrown) {\n      console.log(errorThrown);\n    }\n  });   The error option allows the developer to specifiy a callback that will fire if the given request fails.    $.ajax('http://api.github.com/users', {\n    method: 'GET',\n    dataType: 'json',\n    error: function(jqXHR, textStatus, errorThrown) {\n      console.log(errorThrown);\n    },\n    success: function(data, textStatus, jqXHR) {\n      processData(data);\n    }\n  });  The success option allows the developer to specifiy a callback that will fire if the request is successful and will be passed the requested data as the first argument.", 
            "title": "Sample Settings"
        }, 
        {
            "location": "/#other-jquery-ajax-methods", 
            "text": "Besides the ajax method scoped off the '$' jquery object there are a few other methods that can be reviewed on the Jquery documentation pages.    $.get(url, [settings]);  The  jquery.get  method is just like the ajax method but it is only for get requests.    $.post(url, [settings]);  The  jquery.post  method is just like the ajax method but it is only for post requests.", 
            "title": "Other Jquery AJAX Methods"
        }, 
        {
            "location": "/#promises", 
            "text": "Prior to Jquery 1.5 a jquery ajax request needed success and/or error callbacks passed as options into the call so that the request could be properly handled, like so:    $.ajax({\n    url:  /serverresource.txt ,\n    success: successCallback,\n    error: errorCallback\n  });  However now jquery ajax calls return objects that implement the  CommonJS  promises interface which allows for this functionality:    var promise = $.ajax({\n    url:  /serverresource.txt \n  });\n\n  promise.done(successCallback);\n  promise.fail(errorCallback);\n  promise.always(alwaysCallback);", 
            "title": "Promises"
        }, 
        {
            "location": "/about/", 
            "text": "About the Author\n\n\nAlex works as a web developer and is currently studying Computer Science at Oregon State University. The purpose of this site is to go over the specifics of AJAX when using the Jquery framework.", 
            "title": "About"
        }, 
        {
            "location": "/about/#about-the-author", 
            "text": "Alex works as a web developer and is currently studying Computer Science at Oregon State University. The purpose of this site is to go over the specifics of AJAX when using the Jquery framework.", 
            "title": "About the Author"
        }
    ]
}